server:                   # 服务器的基本配置
  port: 8080              # 服务监听的端口号，这里是8080

resilience4j:             # Resilience4j的配置开始，Resilience4j是一个用于增加服务弹性的库
  retry:                  # 重试机制的配置
    instances:            # 定义多个重试策略实例
      retryApi:           # 第一个重试策略实例的名称
        max-attempts: 5   # 当操作失败时，最大尝试次数为5次
        wait-duration: 1s # 每次重试之间的等待时间为1秒

  circuitbreaker: # 断路器模式配置的开始，断路器模式可以防止对不稳定或失败的服务的连续调用
    instances:              # 定义多个断路器实例
      circuitBreakerApi:                 # 第一个断路器实例的名称
        registerHealthIndicator: true    # 是否将断路器的状态注册为健康检查指标，这样可以在服务监控中看到其状态
        slidingWindowSize: 10            # 用于计算失败率的滑动窗口大小为10，即最近10次调用的失败情况会被考虑
        permittedNumberOfCallsInHalfOpenState: 3  # 当断路器处于半开状态时，允许的最大调用次数为3次，用于测试服务是否已恢复
        slidingWindowType: TIME_BASED    # 滑动窗口的类型是基于时间的，这意味着窗口内的调用是根据时间而不是数量来计算的
        minimumNumberOfCalls: 5          # 在断路器开始计算失败率之前，至少需要有的调用次数为5次
        waitDurationInOpenState:  5s     # 当断路器打开后（即服务被认为不可用），会等待5秒再尝试进入半开状态
        failureRateThreshold: 20         # 当失败率达到20%时，断路器会打开，阻止进一步的调用
        eventConsumerBufferSize: 10      # 用于存储断路器相关事件的缓冲区大小为10，这些事件可以被用于监控和告警

  ratelimiter:             # 限流机制的配置，用于防止过多的请求涌入系统
    instances:             # 定义多个限流策略实例
      flowlimitApi:        # 第一个限流策略实例的名称
        limitForPeriod: 1  # 在一个特定的时间周期内，允许的最大请求数量为1
        limitRefreshPeriod: 1s  # 这个时间周期的长度是1秒，即每1秒会重置请求计数
        timeoutDuration: 100ms  # 当请求超过限制时，客户端应立即收到超时的响应，而不等待处理

  bulkhead:
    instances:
      backendA:
        maxConcurrentCalls: 10
