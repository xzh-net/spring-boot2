<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>spring-boot-harbor</artifactId>
	<name>spring-boot-harbor</name>
	<description>spring-boot-harbor</description>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<skipTests>true</skipTests>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.0</version>
		<relativePath />
	</parent>
	<dependencies>
		<!--SpringBoot通用依赖模块 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.44.0</version>
				<configuration>
					<!--指定远程服务器的Docker服务访问地址 -->
 					<dockerHost>tcp://192.168.2.100:2375</dockerHost>
 					<!--指定私有仓库的访问路径 -->
					<pushRegistry>http://192.168.2.100:88</pushRegistry>
					<!--指定私有仓库的用户名与密码 -->
					<authConfig>
						<username>admin</username>
						<password>Harbor12345</password>
					</authConfig>
					<images>
						<image>
							<!--指定私有仓库访问地址/镜像名称 -->
							<name>192.168.2.100:88/ec_platform/${project.artifactId}:${project.version}</name>
							<build>
								<!--指定Dockerfile的路径 -->
								<dockerFileDir>${project.basedir}</dockerFileDir>
							</build>
						</image>
					</images>
				</configuration>
				<!--指定在每次打包或者重新打包的时候运行该插件的build, push, run目标 -->
				<executions>
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>