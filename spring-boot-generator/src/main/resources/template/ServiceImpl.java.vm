package ${package}.${moduleName}.service.impl;

import org.springframework.stereotype.Service;
import ${package}.${moduleName}.common.model.CommonPage;
import ${package}.${moduleName}.common.utils.StringUtils;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package}.${moduleName}.framework.service.impl.SuperServiceImpl;
import ${package}.${moduleName}.mapper.${className}Mapper;
import ${package}.${moduleName}.service.${className}Service;
import ${package}.${moduleName}.model.po.${className}PO;
import ${package}.${moduleName}.model.vo.view.${className}VO;
import ${package}.${moduleName}.model.vo.query.${className}QueryVO;
import ${package}.${moduleName}.model.vo.list.${className}ListVO;
import ${package}.${moduleName}.model.vo.form.${className}FormVO;
import ${package}.${moduleName}.model.convert.${className}Convert;

import java.util.List;

/**
 * ${comments}服务接口实现
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${className}ServiceImpl extends SuperServiceImpl<${className}Mapper, ${className}PO> implements ${className}Service {

    /**
     * 保存${comments}
     *
     * @param form ${comments}表单数据
     */
    @Override
    public void save(${className}FormVO form) {
        save(${className}Convert.INSTANCE.convert(form));
    }

    /**
     * 更新${comments}
     *
     * @param id   ${comments}记录ID
     * @param form ${comments}表单数据
     */
    @Override
    public void edit(Long id, ${className}FormVO form) {
        ${className}PO ${classname}Po = ${className}Convert.INSTANCE.convert(form);
        ${classname}Po.setId(id);
        updateById(${classname}Po);
    }

    /**
     * 获取${comments}详情
     *
     * @param id ${comments}记录ID
     * @return ${className}VO ${comments}详情信息
     */
    @Override
    public ${className}VO get(Long id) {
        return ${className}Convert.INSTANCE.convert(getById(id));
    }

    /**
     * 分页查询${comments}列表
     *
     * @param query ${comments}查询条件
     * @return CommonPage<${className}ListVO> ${comments}分页列表
     */
    @Override
    public CommonPage<${className}ListVO> page(${className}QueryVO query) {
        LambdaQueryWrapper<${className}PO> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper#foreach ($column in $columns)
#if($column.columnName != $pk.columnName && 
    $column.columnName.toLowerCase() != "create_user_id" && 
    $column.columnName.toLowerCase() != "create_time" && 
    $column.columnName.toLowerCase() != "update_user_id" && 
    $column.columnName.toLowerCase() != "update_time" && 
    $column.columnName.toLowerCase() != "del_flag")
#if($column.attrType == "String")
                .like(StringUtils.isNotEmpty(query.get${column.attrName}()), ${className}PO::get${column.attrName}, query.get${column.attrName}())#else
                .eq(query.get${column.attrName}() != null, ${className}PO::get${column.attrName}, query.get${column.attrName}())#end#end#end
        ;
        Page<${className}PO> page = new Page<>(query.getPageNum(), query.getPageSize());
        IPage<${className}PO> iPage = page(page, queryWrapper);
        return CommonPage.restPage(iPage, ${className}Convert.INSTANCE.convertList(iPage.getRecords()));
    }

    /**
     * 查询所有${comments}列表
     *
     * @param query ${comments}查询条件
     * @return List<${className}ListVO> ${comments}列表
     */
    @Override
    public List<${className}ListVO> listAll(${className}QueryVO query) {
        LambdaQueryWrapper<${className}PO> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper#foreach ($column in $columns)
#if($column.columnName != $pk.columnName && 
    $column.columnName.toLowerCase() != "create_user_id" && 
    $column.columnName.toLowerCase() != "create_time" && 
    $column.columnName.toLowerCase() != "update_user_id" && 
    $column.columnName.toLowerCase() != "update_time" && 
    $column.columnName.toLowerCase() != "del_flag")
#if($column.attrType == "String")
                .like(StringUtils.isNotEmpty(query.get${column.attrName}()), ${className}PO::get${column.attrName}, query.get${column.attrName}())#else
                .eq(query.get${column.attrName}() != null, ${className}PO::get${column.attrName}, query.get${column.attrName}())#end#end#end
        ;
        List<${className}PO> list = list(queryWrapper);
        return ${className}Convert.INSTANCE.convertList(list);
    }
    
}