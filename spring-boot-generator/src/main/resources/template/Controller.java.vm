package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

import ${package}.${moduleName}.model.vo.query.${className}QueryVO;
import ${package}.${moduleName}.model.vo.list.${className}ListVO;
import ${package}.${moduleName}.model.vo.form.${className}FormVO;
import ${package}.${moduleName}.model.vo.view.${className}VO;
import ${package}.${moduleName}.service.${className}Service;
import ${package}.${moduleName}.common.model.api.CommonPage;
import ${package}.${moduleName}.common.model.api.CommonResult;
import ${package}.${moduleName}.common.model.enums.BusinessType;
import ${package}.${moduleName}.framework.aspectj.annotation.AuditLog;

/**
 * ${comments}控制层
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${pathName}")
@Tag(name = "${comments}", description = "${comments}API")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

     /**
     * 保存${comments}
     *
     * @param form ${comments}表单数据
     * @return CommonResult<?> 通用返回结果
     */
    @PostMapping("")
    @Operation(summary = "新增", description = "新增")
    @AuditLog(operation = "'新增${comments}:' + #form", businessType = BusinessType.INSERT)
    @PreAuthorize("@ss.hasPermi('${classname}:save')")
    public CommonResult<?> save(@RequestBody @Validated ${className}FormVO form) {
        ${classname}Service.save(form);
        return CommonResult.success(null);
    }

    /**
     * 更新${comments}
     *
     * @param id   ${comments}记录ID
     * @param form ${comments}表单数据
     * @return CommonResult<?> 通用返回结果
     */
    @PutMapping("{id}")
    @Operation(summary = "修改", description = "修改")
    @AuditLog(operation = "'修改${comments}:' + #form", businessType = BusinessType.UPDATE)
    @PreAuthorize("@ss.hasPermi('${classname}:edit')")
    public CommonResult<?> edit(@PathVariable Long id, @RequestBody ${className}FormVO form) {
        ${classname}Service.edit(id, form);
        return CommonResult.success(null);
    }

    /**
     * 根据主键删除${comments}数据
     *
     * @param id ${comments}记录ID
     * @return CommonResult<?> 通用返回结果
     */
    @DeleteMapping("{id}")
    @Operation(summary = "删除", description = "删除")
    @AuditLog(operation = "'删除${comments}:' + #id", businessType = BusinessType.DELETE)
    @PreAuthorize("@ss.hasPermi('${classname}:remove')")
    public CommonResult<?> remove(@PathVariable Long id) {
        ${classname}Service.removeById(id);
        return CommonResult.success(null);
    }

    /**
     * 批量删除${comments}数据
     *
     * @param ids ${comments}记录ID数组
     * @return CommonResult<?> 通用返回结果
     */
    @DeleteMapping("batchRemove")
    @Operation(summary = "批量删除", description = "批量删除")
    @AuditLog(operation = "批量删除${comments}", businessType = BusinessType.DELETE)
    @PreAuthorize("@ss.hasPermi('${classname}:batchRemove')")
    public CommonResult<?> batchRemove(@RequestBody Long[] ids) {
        ${classname}Service.removeByIds(Arrays.asList(ids));
        return CommonResult.success(null);
    }

    /**
     * 通过主键获取${comments}详情
     *
     * @param id ${comments}记录ID
     * @return CommonResult<${classname}VO> ${comments}详情返回结果
     */
    @GetMapping("{id}")
    @Operation(summary = "查询详情", description = "查询详情")
    @AuditLog(operation = "'查询${comments}详情:' + #id", businessType = BusinessType.SELECT)
    @PreAuthorize("@ss.hasPermi('${classname}:get')")
    public CommonResult<${className}VO> get(@PathVariable Long id) {
        return CommonResult.success(${classname}Service.get(id));
    }

    /**
     * 分页查询${comments}列表
     *
     * @param query ${comments}查询条件
     * @return CommonResult<CommonPage < ${classname}VO>> ${comments}分页列表返回结果
     */
    @GetMapping("")
    @Operation(summary = "分页查询列表", description = "分页查询列表")
    @AuditLog(operation = "'分页查询${comments}列表:' + #query", businessType = BusinessType.SELECT)
    @PreAuthorize("@ss.hasPermi('${classname}:list')")
    public CommonResult<CommonPage<${className}ListVO>> page(${className}QueryVO query) {
        return CommonResult.success(${classname}Service.page(query));
    }

    /**
     * 查询${comments}全部数据
     *
     * @return CommonResult<List < VjspDictDataVO>> 所有${comments}数据列表返回结果
     */
    @GetMapping("listAll")
    @Operation(summary = "查询全部数据", description = "查询全部数据")
    @AuditLog(operation = "'查询${comments}全部数据:' + #query", businessType = BusinessType.SELECT)
    @PreAuthorize("@ss.hasPermi('${classname}:listAll')")
    public CommonResult<List<${className}ListVO>> listAll(${className}QueryVO query) {
        return CommonResult.success(${classname}Service.listAll(query));
    }
}
